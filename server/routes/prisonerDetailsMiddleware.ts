import { NextFunction, Request, Response } from 'express'
import { RPClient } from '../data'
import { PrisonerData } from '../@types/express'

export default async function prisonerDetailsMiddleware(req: Request, res: Response, next: NextFunction) {
  /* *******************************
    FETCH PRISONER PROFILE DATA HERE
  ********************************* */
  const { prisonerNumber } = req.query
  if (prisonerNumber) {
    try {
      const apiResponse = new RPClient()
      const prisonerData = (await apiResponse.get(
        req.user.token,
        `/resettlement-passport/prisoner/${prisonerNumber}`,
      )) as PrisonerData

      let prisonerImage = ''
      try {
        prisonerImage = (await apiResponse.getImageAsBase64String(
          req.user.token,
          `/resettlement-passport/prisoner/G4274GN/image/1313058`,
        )) as string
        console.log(prisonerImage)
      } catch (imageFetchError) {
        console.error('Error fetching prisoner image:', imageFetchError)
        // Set a default image string
        prisonerImage =
          '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'
      }
      prisonerData.prisonerImage = prisonerImage
      req.prisonerData = prisonerData
    } catch (err) {
      next(err)
    }
  }
  next()
}
