version: 2.1

orbs:
  hmpps: ministryofjustice/hmpps@8
  slack: circleci/slack@4.12.5

parameters:
  alerts-slack-channel:
    type: string
    # Normally team specific alert channel e.g. hmpps_tech_alerts, syscon-alerts, dps_sed_alerts
    # This is to avoid a general alert dumping ground that no-one then monitors
    default: dps_alerts_security

  releases-slack-channel:
    type: string
    default: resettlement_passport_releases

  node-version:
    type: string
    default: 20.12-browsers

  redis-version:
    type: string
    default: '7.0'

executors:
  # same as hmpps/node_redis executor with the addition of gotenberg container
  integration-tests-executor:
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
      - image: cimg/redis:<< pipeline.parameters.redis-version >>
      - image: 'gotenberg/gotenberg:7.7.0'
        command:
          - "gotenberg"
          - "--api-port=3009"
          - "--chromium-ignore-certificate-errors"
          - "--api-timeout=30s"
          - "--pdfengines-engines=pdftk"
          - "--uno-listener-restart-threshold=0"
    resource_class: medium
    working_directory: ~/app

  zap-tests-executor:
    docker:
      - image: cimg/python:3.12.3
      - image: 'zaproxy/zap-stable'
        entrypoint: ["/bin/sh", "-c"]
        command: ["zap.sh -daemon -host 0.0.0.0 -port 8080 -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true -config api.disablekey=true"]
    resource_class: medium
    working_directory: ~/app    


jobs:
  build:
    executor:
      name: hmpps/node
      tag: << pipeline.parameters.node-version >>
    steps:
      - checkout
      - run:
          name: Update npm
          # temporary hard code version until we move to v10
          command: 'sudo npm install -g npm@9.8.1'
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install Dependencies
          command: npm ci --no-audit
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
            - ~/.cache
      - run:
          command: |
            npm run build
      - run:
          # Run linter after build because the integration test code depend on compiled typescript...
          name: Linter check
          command: npm run lint
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - build
            - dist
            - assets
            - .cache/Cypress
            - .cache/playwright

  compare_coverage:
    executor:
      name: hmpps/node
      tag: << pipeline.parameters.node-version >>
    environment:
      TZ: Europe/London
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run: ls /tmp/workspace
      - run: ls /tmp/workspace/coverage
      - run: ls 
      - run:
          name: compare coverage
          command: python3 coverage_checker/coverage_checker.py

  unit_test:
    executor:
      name: hmpps/node
      tag: << pipeline.parameters.node-version >>
    environment:
      TZ: Europe/London
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: unit tests
          command: npm run test:ci 
      - store_test_results:
          path: test_results
      - store_artifacts:
          path: test_results/unit-test-reports.html
      - persist_to_workspace:
          root: coverage
          paths: 
            - clover.xml

  get_main_coverage:
    executor:
      name: hmpps/node
      tag: << pipeline.parameters.node-version >>
    environment:
      TZ: Europe/London
    steps:
      - run:
          name: Update npm
          command: 'sudo npm install -g npm@9.8.1'
      - run: mkdir ~/.ssh/
      - run: touch ~/.ssh/known_hosts
      - run: ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run: git clone -b "$CIRCLE_BRANCH" "$CIRCLE_REPOSITORY_URL"  
      - run:
          name: Install Dependencies
          command: cd hmpps-resettlement-passport-ui/ && npm ci --no-audit
      - run:
          name: unit tests
          command: cd hmpps-resettlement-passport-ui/ && npm run test:ci 
      - run: mv hmpps-resettlement-passport-ui/coverage/clover.xml hmpps-resettlement-passport-ui/coverage/main_clover.xml
      - persist_to_workspace:
          root: hmpps-resettlement-passport-ui
          paths: 
            - coverage/main_clover.xml

  integration_test:
    executor: integration-tests-executor
    environment:
      TZ: Europe/London
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - run:
          name: Install missing OS dependency
          command: sudo apt-get install libxss1
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Get wiremock
          command: curl -o wiremock.jar https://repo1.maven.org/maven2/com/github/tomakehurst/wiremock-standalone/2.27.1/wiremock-standalone-2.27.1.jar
      - run:
          name: Run wiremock
          command: java -jar wiremock.jar --port 9091
          background: true
      - run:
          name: Run the node app.
          command: npm run start-feature
          background: true
      - run:
          name: Wait for node app to start
          command: sleep 5
      - run:
          name: integration tests
          command: npm run int-test
      - store_test_results:
          path: test_results
      - store_artifacts:
          path: integration_tests/videos
      - store_artifacts:
          path: integration_tests/screenshots

  end-to-end-test:
    circleci_ip_ranges: true
    executor:
      name: hmpps/node_redis
      node_tag: << pipeline.parameters.node-version >>
      redis_tag: "7.0"
    steps:
      - checkout
      - run:
          name: Install project dependencies
          command: npm i
      - run:
          name: Install Playwright browsers
          command: npx playwright install --with-deps
      - run:
          name: Run cucumber tests
          command: | 
            export BASEURL=${DEV_BASEURL}
            export USERNAME=${E2E_DEV_USERNAME}
            export PASSWORD=${E2E_DEV_PASSWORD}
            export BROWSER=${E2E_DEV_BROWSER}
            npm run end-to-end-test
      - store_test_results:
          path: test_results

  zap_test:
    circleci_ip_ranges: true
    executor: zap-tests-executor
    steps:
      - checkout
      - run:
          name: Run zap tests
          command: |
            export ST_USERNAME=${E2E_DEV_USERNAME}
            export ST_PASSWORD=${E2E_DEV_PASSWORD}
            export ST_PROXY_URL="http://localhost:8080"
            export ST_API_KEY=''
            export ST_ENV_NAME='dev'
            mkdir -p test_results
            pip install -r ./security_test/requirements.txt
            playwright install --with-deps
            python3 ./security_test/test_security.py    

  pt_browser_smoke_test:
    circleci_ip_ranges: true
    docker:
      - image: grafana/k6:latest-with-browser
    steps:
      - checkout
      - run:
          command: |
            export PT_USERNAME=${E2E_DEV_USERNAME}
            export PT_PASSWORD=${E2E_DEV_PASSWORD}
            k6 run pt_tests/tests/run.js --no-setup
          environment:
            EXECUTION_TYPE: smoke
            PROCESS: dev

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build:
          filters:
            tags:
              ignore: /.*/
      - unit_test:
          requires:
            - build
            - get_main_coverage
      - integration_test:
          requires:
            - build
      - compare_coverage:
           requires:
            - unit_test     
      - get_main_coverage:
          name: get_main_coverage
      - hmpps/helm_lint:
          name: helm_lint
      - hmpps/build_docker:
          name: build_docker
          filters:
            branches:
              only:
                - main
      - hmpps/deploy_env:
          name: deploy_dev
          env: "dev"
          context: hmpps-common-vars
          filters:
            branches:
              only:
                - main
          requires:
            - helm_lint
            - unit_test
            - integration_test
            - build_docker
          helm_timeout: 5m
      - end-to-end-test:
          name: end-to-end-test
          requires:
            - deploy_dev
      - pt_browser_smoke_test:
          filters:
            branches:
              only:
                - main
          requires:
            - end-to-end-test            
      - zap_test:
          filters:
            branches:
              only:
                - main
          requires:
            - deploy_dev            
      - request-preprod-approval:
          type: approval
          requires:
            - end-to-end-test
      - hmpps/deploy_env:
          name: deploy_preprod
          env: "preprod"
          context:
            - hmpps-common-vars
            - hmpps-resettlement-passport-ui-preprod
          requires:
            - request-preprod-approval
          helm_timeout: 5m
      - request-prod-approval:
          type: approval
          requires:
            - deploy_preprod
      - hmpps/deploy_env:
          name: deploy_prod
          env: "prod"
          slack_notification: true
          slack_channel_name: << pipeline.parameters.releases-slack-channel >>
          context:
            - hmpps-common-vars
            - hmpps-resettlement-passport-ui-prod
          requires:
            - request-prod-approval
          helm_timeout: 5m

  security:
    triggers:
      - schedule:
          cron: "33 4 * * 1-5"
          filters:
            branches:
              only:
                - main
    jobs:
      - hmpps/npm_outdated:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - hmpps-common-vars
      - hmpps/npm_security_audit:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - hmpps-common-vars
      - hmpps/trivy_latest_scan:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - hmpps-common-vars
      - hmpps/veracode_pipeline_scan:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - veracode-credentials
            - hmpps-common-vars
  security-weekly:
    triggers:
      - schedule:
          cron: "57 4 * * 1"
          filters:
            branches:
              only:
                - main
    jobs:
      - hmpps/veracode_policy_scan:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - veracode-credentials
            - hmpps-common-vars
